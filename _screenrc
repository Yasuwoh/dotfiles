# Escape key is C-t, literal is t
escape ^Tt

# I like a large scrollback buffer.
defscrollback 10000

# clear scrollback buffer
bind F eval 'scrollback 0' 'scrollback 10000' 'echo "scrollback buffer cleared."'

# don't show startup message
startup_message off

# don't remove windows from the window list as soon as window process exits
zombie kr # k: destroy window, r: resurrect window

# echo command name whenever a window is created or resurrected
verbose on

# changes the name of logfile
deflog on
logfile '.screen/log/screenlog.%H.%Y-%m-%d-%02c:%s-%n.log'
logtstamp on
logtstamp string "\n-- SCREEN [%Y/%m/%d %02c:%s] %n:%t --\n'

# changes the directory for hardcopy and bind ^Y to hardcopy
hardcopydir '.screen/hardcopy'
hardcopy_append on
bind ^Y hardcopy

# changes the filename userd for reading and writing with the past buffer
bufferfile '.screen/screen-exchange'

# enable alternate screen
altscreen on

# enable mouse tracking
defmousetrack on
mousetrack on

# changes the kind of messages to the nethack-style
nethack on

# disables visual bells
vbell off

# disables vbell toggle binding to use ^G as cancel.
bind ^G

# window re-numbering
# override default `N' (number) mapping
bind N colon 'number '

# shortcut of screen sub-command with title option
#bind s colon 'screen -t'

# switch window encoding
bind ^U eval 'encoding utf8' 'info'
bind ^E eval 'encoding eucjp' 'info'

# switch window encoding and changes LANG environment variable (for b-shell)
bind u eval 'encoding utf8' '!!!echo "LANG=ja_JP.UTF-8; export LANG"' 'info'
bind e eval 'encoding eucjp' '!!!echo "LANG=ja_JP.eucJP; export LANG"' 'info'

# horizontally split region
bind S split
bind ^S split # Disable ''xoff'' bind

# vertically split region
bind V split -v
bind ^V split -v # Disable ''digraph'' bind

# switch focus to other region (like vi)
# override default `k'(kill), `t'(time), `b'(break) mappings
bind j focus down
bind k focus up
bind h focus left
bind l focus right
bind t focus top
bind b focus bottom

# continuos switch focus to other region (like vi)
bind ^J eval 'focus down'  'command -c cfocus' 'echo "Entering region select mode."'
bind ^K eval 'focus up'    'command -c cfocus' 'echo "Entering region select mode."'
bind ^H eval 'focus left'  'command -c cfocus' 'echo "Entering region select mode."'
bind ^L eval 'focus right' 'command -c cfocus' 'echo "Entering region select mode."'
bind -c cfocus ^J eval 'focus down'   'command -c cfocus'
bind -c cfocus  j eval 'focus down'   'echo "Exiting region select mode."'
bind -c cfocus ^K eval 'focus up'     'command -c cfocus'
bind -c cfocus  k eval 'focus up'     'echo "Exiting region select mode."'
bind -c cfocus ^H eval 'focus left'   'command -c cfocus'
bind -c cfocus  h eval 'focus left'   'echo "Exiting region select mode."'
bind -c cfocus ^L eval 'focus right'  'command -c cfocus'
bind -c cfocus  l eval 'focus right'  'echo "Exiting region select mode."'
bind -c cfocus ^T eval 'focus top'    'command -c cfocus'
bind -c cfocus  t eval 'focus top'    'echo "Exiting region select mode."'
bind -c cfocus ^B eval 'focus bottom' 'command -c cfocus'
bind -c cfocus  b eval 'focus bottom' 'echo "Exiting region select mode."'

# swap region to neighbour's
# override default `W'(width) mapping
bind W eval 'command -c swap' 'echo "swap region to: [N]ext/[P]revious"'
bind -c swap N eval 'select -' 'focus down' 'other' 'focus up' 'other' 'focus down'
bind -c swap P eval 'select -' 'focus up' 'other' 'focus down' 'other' 'focus up'

# continuous resize region
# override default `r'(wrap) mapping.
bind r eval 'command -c cresize' 'echo "Entering region resize mode.(j: +1, k: -1, J: +10, K: -10, n: min, x: max, =)"'
bind -c cresize j eval 'resize +1'  'command -c cresize'
bind -c cresize + eval 'resize +1'  'command -c cresize'
bind -c cresize k eval 'resize -1'  'command -c cresize'
bind -c cresize - eval 'resize -1'  'command -c cresize'
bind -c cresize J eval 'resize +10' 'command -c cresize'
bind -c cresize K eval 'resize -10' 'command -c cresize'
bind -c cresize = eval 'resize ='   'command -c cresize'
bind -c cresize n eval 'resize min' 'command -c cresize'
bind -c cresize x eval 'resize max' 'command -c cresize'

# continuous switch to other window
bind ^N eval 'next' 'command -c cselect' 'echo "Entering window select mode."'
bind ^P eval 'prev' 'command -c cselect' 'echo "Entering window select mode."'
bind -c cselect ^N eval 'next' 'command -c cselect'
bind -c cselect ^P eval 'prev' 'command -c cselect'
bind -c cselect n eval 'next' 'echo "Exiting window select mode."'
bind -c cselect p eval 'prev' 'echo "Exiting window select mode."'

# list of all windows is displayed in the blank window(-b) for visual window selection
# override default `w'(windows) mapping
bind w windowlist -b # sorting by window number
bind ^W windowlist -b -m # sorting by most-recentry-used list

# Function Key to select window
bindkey "^[[11~" select 0
bindkey "^[[12~" select 1
bindkey "^[[13~" select 2
bindkey "^[[14~" select 3
bindkey "^[[15~" select 4
bindkey "^[[17~" select 5
bindkey "^[[18~" select 6
bindkey "^[[19~" select 7
bindkey "^[[20~" select 8
bindkey "^[[21~" select 9
bindkey "^[[23~" select 10
bindkey "^[[24~" select 11

# Layout functions
bind "^[[11~" eval 'layout select 0'  'layout show'
bind "^[[12~" eval 'layout select 1'  'layout show'
bind "^[[13~" eval 'layout select 2'  'layout show'
bind "^[[14~" eval 'layout select 3'  'layout show'
bind "^[[15~" eval 'layout select 4'  'layout show'
bind "^[[17~" eval 'layout select 5'  'layout show'
bind "^[[18~" eval 'layout select 6'  'layout show'
bind "^[[19~" eval 'layout select 7'  'layout show'
bind "^[[20~" eval 'layout select 8'  'layout show'
bind "^[[21~" eval 'layout select 9'  'layout show'
bind "^[[23~" eval 'layout select 10' 'layout show'
bind "^[[24~" eval 'layout select 11' 'layout show'
#layout autosave on
source .screen/layout
#layout save default

# mover cursor to begining of scrollback buffer (and move to the leftmost column of window top)
bindkey -m ; b stuff "g/:\015\006\002"

# refuses yet another hack in rpm packaged screen
# both ] and ^] does write the paste (default unnamed) buffer.
bind ^] paste .

# enable background-color-erase setting
defbce on

# use bright colors for bold text
#attrcolor b '.I'

# the $TERM variable set to `xterm' for various environment
#term xterm
term screen

# enable 256 color
termcapinfo xterm 'Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm'

# don't resize terminal width when re-attached
termcapinfo xterm 'is=\E[r\E[m\E[2J\E[H\E[?7h\E[?1;4;6l:Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm:ti@:te@'

# changes the windowlist format to suit caption/hardstatus
windowlist title '%{u .g}Num Flags Title%=[0-9] select the number [movement] j,C-n:Down k,C-p:Up (C-)f:PageDown (C-)b:PageUp'
windowlist string '%{.g}%3n %{.y}%f%09=%{dg} %t %='

caption always '%?%F%{= bW}%:%{= Kw}%?%2n%f%07=%t%?%P [COPY MODE]%:%?%=%{d..}%h'
#               %?%F       %:       %?                                    -- (1) IF/ELSE フォーカスがあるかないか(%F)を条件にする
#                   %{= bW}                                               -- (2) フォーカスがある場合、以降の背景色をb、前景色をWにする
#                            %{= Kw}                                      -- (3) フォーカスがない場合、以降の背景色をK、前景色をwにする
#                                     %2n                                 -- (4) ウィンドウ番号を2桁幅で出力
#                                        %f                               -- (5) ウィンドウのフラグを出力(「(L)」とか「Z」とか「@」とか)
#                                          %07=                           -- (6) 7桁パディング(フラグの出力幅は不定だけど7桁あれば足りるだろう)
#                                              %t                         -- (7) ウィンドウタイトルを出力
#                                                %?%P            %:%?     -- (8) IF/ELSE コピーモードか否か(%P)を条件にする
#                                                     [COPY MODE]         -- (9) コピーモードを表す文字列
#                                                                    %=   -- (10) 残り右全部パディング(右端まで背景色を有効にするため)
#                                                                      %h -- (11) ウィンドウのハードステータス

hardstatus alwayslastline '%{= .g}%H%{-} %L=%-w%45L>%{=u b.}%n %t%{-}%+w %-37<%=%{= .y}(%l) %{-}%Y/%m/%d %02c:%s'
#                          %{= .g}%H%{-}                                                                         -- (2) ホスト名
#                                        %L=                                                                     -- (3) ウィンドウ一覧のタブ位置
#                                           %-w                                                                  -- (4) 表示中のウィンドウより小さい番号のウィンドウ一覧
#                                              %45L>                                                             -- (5) ウィンドウ一覧をスクロールさせる左端を45%指定
#                                                   %{=u b.}%n %t%{-}                                            -- (6) 前景色bでウィンドウ番号とタイトルを出力
#                                                                    %+w                                         -- (7) 表示中のウィンドウより大きい番号のウィンドウ一覧
#                                                                        %-37<                                   -- (8) 右の余白を半角37文字確保
#                                                                             %=                                 -- (9) 残り右前部をパディング
#                                                                               %{= .y}(%l)                      -- (10) ロードアベレージを背景色yで表示
#                                                                                           %{-}%Y/%m/%d %02c:%s -- (1) タイムスタンプ

