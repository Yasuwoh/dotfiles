パーキンソンの法則
----------
第1法則
仕事の量は、完成のために与えられた時間をすべて満たすまで膨張する
第2法則
支出の額は、収入の額に達するまで膨張する
%
ムーアの法則
----------
集積回路上のトランジスタ数は18か月（=1.5年）ごとに倍になる
%
パレートの法則(80:20の法則)
----------
全体成果の8割は、全体構成の2割が生み出している
%
ジップの法則
----------
出現頻度が k 番目に大きい要素が全体に占める割合は 1/k に比例する
%
ハインリッヒの法則
----------
1つの重大事故の背景には29の軽微な事故があり、その背景には300の異常が存在する。
%
スタージョンの法則
----------
1. 常に絶対にそうであるものは、存在しない。(Nothing is always asbolutely so.)
2. どんなものも、その90%はカスである。
%
デュヴェルジェの法則
----------
各選挙区ごとにM人を選出する場合、候補者数は次第に各選挙区ごとにM+1人に収束していく
%
斉一性の原理
----------
斉一性の原理とは、社会心理学の用語であり、ある特定の集団が集団の内部において異論や反論などの存在を許容せずにある特定の方向に進んでいく事を示す。
斉一性の原理は、多数決で意思決定を行う場では起こらず、全会一致で意思決定を行う状況で発生する。
1956年発表のアメリカ映画「十二人の怒れる男」は、斉一性の原理をテーマに扱っている。 
%
ハンロンの剃刀
----------
Never attribute to malice that which is adequately explained by stupidity.
無能で十分説明されることに悪意を見出すな
%
バザール方式の19の教訓
----------
1. 全ての良いソフトウェアは開発者の個人的な希望から始まる。
2. 良いプログラマは何を書けば良いか知っている。凄いプログラマは何を書き直せば・何を再利用すれば良いか知っている。
3. 破棄する計画を立てる。いずれにせよ、そうすることになる。[注釈 1]
4. 適切な取り組みをしていれば、おかしな問題は自発的に主張してくる。
5. ソフトウェアに興味がなくなった時には、ソフトウェアを手放して優秀な後継者に引き継ぎする。
6. 利用者を共同開発者として扱うことは迅速な実装改善と効率的なデバッグの最短ルートである。
7. 素早く頻繁なリリース（英語版）を実施し、顧客の話を聞く。
8. 十分なベータテスターと共同開発者の基盤があれば、大半の問題はすぐに特定されて誰かが直す。
9. 賢いデータ構造と愚かなソースコードは、その逆であるよりずっと良い成果を出す。
10. あなたがベータテスターを最も有益な資産として扱うなら、彼らは最も有益な資産となり応えてくれる。
11. 次の最適案は利用者による良いアイディアに気付かされる。後から出たアイディアの方が良いこともある。
12. 大半の衝撃的で革新的な解決策は自身の問題の捉え方が間違っていることに気付くことから始まる。
13. 完璧な設計はそれ以上の追加することがなくなった時ではなく、それ以上の削減することがなくなった時である。
14. 全てのツールは想像通りに便利であるべきであるが、本当に凄いツールは作者の想像を越えた便利さを与える。
15. どんなゲートウェイソフトウェアを実装する場合でも、データストリームへの影響は可能な限り最小限に抑え、受け手が強制しない限りはデータを決して破棄しない。
16. 自分の書き方がチューリング完全から外れているなら、シンタックス・シュガーは手助けになる。
17. セキュリティシステムのセキュリティはそれが秘密である時だけ意味を成す。見掛けのセキュリティには注意すること。
18. おかしな問題を解決することは、おかしな問題を探すことから始まる。
19. 開発コーディネーターが少なくともインターネットと同等に良質な交流手段を持って圧力をかけない先導手法を知っているなら、必然的に頭数は多い方が良い。
%
ロバート議事規則
----------
# 4つの権利
- 多数者の権利
- 少数者の権利　
- 個人の権利
- 不在者の権利
# 4つの原則
- 一時一件の原則: 案件は一件ずつ審議すること
- 一時不再議の原則: 同一会期中においては同一の議題を取り上げないこと
- 多数決の原則: 会議の表決は多数決によること
- 定足数の原則: 会議の開催には全議員の一定割合が参加すること
