# users generic .zshrc file for zsh(1)


# 一般設定

## zsh hook機能を有効にする
autoload -Uz add-zsh-hook

## colors を使う
autoload -Uz colors
colors

## ディレクトリ名だけ打つと cd する
setopt auto_cd

## cd すると自動的に pushd する
setopt auto_pushd

## 入力ミスに対して訂正候補をサジェストする
setopt correct

## 一覧を詰めて表示
setopt list_packed

## コマンドライン末尾のスラッシュ(/)を削除しない
setopt noautoremoveslash

## 補完候補が表示されるときに、ビープ音を鳴らさない
setopt nolistbeep

## 拡張globを使う。ファイル名展開に色々特殊な記法が使えるようになるけど、難解。
# setopt extendedglob


# プロンプト設定
case ${UID} in
## スーパーユーザの場合
0)
    PROMPT="%F{cyan}$(echo ${HOST%%.*} | tr '[a-z]' '[A-Z]') %B%F{red}%/#%f%b "
    PROMPT2="%B%F{red}%_#%f%b "
    SPROMPT="%B%F{red}%r is correct? [No, yes, abort, edit]:%f%b "
    ;;
## スーパーユーザ以外の場合
*)
    ## 通常プロンプト
    PROMPT='%f[%F{red}%n%f@%F{green}%m%f %(1j.(%j).)%F{blue}%c%f${vcs_info_msg_0_}]%f%(0?.%%.%F{red}%%%f) '
        ### [<ユーザ名>@<ホスト名> <バックグラウンドジョブ数(あれば)><カレントディレクトリ><VCS情報(後述)>]%
        ### 最後のプロンプト記号(%)は、直前の終了ステータス($?)が0以外だと赤くなる
    ## 右プロンプト
	RPROMPT='in %F{blue}%/%f'
        ### in <カレントディレクトリ(フルパス)>
    ## 複数行入力時のプロンプト
    PROMPT2='%F{red}%_%%%f '
        ### <入力中の対象>%
    ## 入力ミスに対するサジェストプロンプト
    SPROMPT='%F{red}%r%f is correct? [No, yes, abort, edit]: '
        ### <サジェスト> is correct ?
    ;;
esac


# キーバインド設定
# なお、現在のキーバインド設定は bindkey -L で確認できる。
## Emacsライクキーバインド
bindkey -e
## HOMEキーで行頭へ移動
bindkey "^[[1~" beginning-of-line
## ENDキーで行末へ移動
bindkey "^[[4~" end-of-line
## Deleteキーを機能させる
bindkey "^[[3~" delete-char
## 標準の accept-line (i.e. Enterキーを押したときの動作)をオーバーライドする。
## 具体的には、何も入力せずEnterを押すと、日付時刻と直前の終了ステータスを表示する。
function do_enter() {
    ### 終了ステータスを退避
    RET=$?
    ### なんか書かれていたら、accept-lineをそのまま動かす
    if [ -n "$BUFFER" ] ; then
        zle accept-line
        return 0
    fi
    ### 改行して次の行へ。(これがないと、更にその次の echo がプロンプトと同じ行に出力される)
    echo
    ### 日付時刻と直前の終了ステータスを表示
    echo "`date`, last exit status: $RET"
    ### ls を最初の一行だけ表示。2行以上になるときは"and more"と表示。あと改行しない
    local lsc
    lsc=`ls --color -C -m`
    echo $lsc | head -n 1 | tr -d "\n"
    [[ "`echo $lsc | wc -l`" -ge 2 ]] && echo -n "\t[and more]"
    ### accept-line を実行。Enter連打で vcs_info が走らないことのハック。
    zle accept-line
}
### zsh のウィジェットとして do_enter 関数を登録
zle -N do_enter
### C-m (i.e. Enterキー)のキーバインドを do_enter に置き換え。
### このため、C-jなど、他のキーの動作はそのまま。
bindkey '^M' do_enter

## C-j でコマンドを実行して、その行を残す
bindkey '^J' accept-and-hold

## 履歴をたどるとき、カーソルを行末にセットする
### history-search-end 関数をロード
autoload -Uz history-search-end
### history-beginning-search ウィジェットを history-search-end で置き換え
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
### C-p, C-n で履歴をたどる
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end
### M-p, M-n でも履歴をたどる
bindkey "\\eP" history-beginning-search-backward-end
bindkey "\\eN" history-beginning-search-forward-end

## xoff キーバインドを無効にする
stty stop undef

## Shift-Tab で補完候補を逆にたどる
bindkey "\e[Z" reverse-menu-complete


# 履歴管理
## 履歴ファイル
HISTFILE=${HOME}/.zsh_history
## 記憶する履歴の数(メモリで保持する数)
HISTSIZE=50000
## 保存する履歴の数(HISTFILEで保存する数)
SAVEHIST=${HISTSIZE}
## 重複するコマンドは履歴に残さない
setopt hist_ignore_dups
## 履歴データを複数zsh間で共有する
setopt share_history
## 履歴を上書きするのではなく追記する
setopt append_history


# 補完設定
## ホームディレクトリ配下の補完ファイルを優先して使う
fpath=(${HOME}/.zsh/functions/Completion ${fpath})
## compinit を使う
autoload -Uz compinit
compinit


# zed レディ
## zed 関数をロードしておく。
autoload -Uz zed


# VCS (Version Control System)
## vcs_info 関数をロードし precmd フックに追加
autoload -Uz vcs_info
function precmd_vcs_info() {
    vcs_info
}
add-zsh-hook precmd precmd_vcs_info
## プロンプトの変数遅延展開を有効にする
setopt prompt_subst
## リポジトリの変更をチェックするようにする。巨大なリポジトリでは重い。
zstyle ':vcs_info:git:*' check-for-changes true
## ステージされたファイルがある場合、 %c エスケープに # を設定
zstyle ':vcs_info:git:*' stagedstr '#'
## ステージされていないファイルがある場合、 %u エスケープに ! を設定
zstyle ':vcs_info:git:*' unstagedstr '!'
## git でバージョン管理されていないファイルの存在およびスタッシュの数を知りたいので、ユーザフック関数を定義。
zstyle ':vcs_info:git+set-message:*' hooks \
    vcs-git-hook-begin \
    vcs-git-untracked \
    vcs-git-stash-count
### 他のフック関数に先立って呼ばれる関数。この関数はこれ以降の関数を呼んで良いかを判断する。
function +vi-vcs-git-hook-begin() {
    ### 初回だけこれ以降の関数を実行する。$1が実行回数カウンタ。
    if [[ "$1" -gt 0 ]] ; then
        ### エラーコードで返却すると、これ以降のフック関数は実行されない。
        return 1
    fi
    ### ワークツリーの中にいるかをチェックする。
    if [[ $(command git rev-parse --is-inside-work-tree 2>/dev/null) != 'true' ]] ; then
        return 1
    fi
    ### 正常コードで返却すると、これ以降のフック関数も実行される。
    return 0
}
## バージョン管理されていないファイルが存在する場合、 %u エスケープに ? 文字列を追加する。
function +vi-vcs-git-untracked() {
    if command git status --porcelain 2>/dev/null \
            | awk '{print $1}' \
            | command grep -F '??' 2>&1 >/dev/null ; then
        hook_com[unstaged]+='?'
    fi
}
## スタッシュが存在する場合、 %m (misc) エスケープに (<スタッシュ数>) という文字列を追加する
function +vi-vcs-git-stash-count() {
    local stash
    stash=$(command git stash list 2>/dev/null | wc -l | tr -d ' ')
    if [[ "${stash}" -gt 0 ]] ; then
        hook_com[misc]+="(${stash})"
    fi
}
## リポジトリ配下における、通常時の文字列を指定。
#1行目はプロンプトで、2行目はハードステータスで使うことを想定。
if [ "${TMUX}" ] ; then
    zstyle ':vcs_info:git:*' formats \
        '/%F{red}%r%f:%F{green}%b%f%m%F{blue}%c%f%F{yellow}%u%f' \
        '#[default] #[bg=green,fg=black]%s#[bg=red,fg=white] %r #[bg=blue,fg=white] %b #[bg=yellow,fg=black]%m%c%u#[default]'

    ## リポジトリ配下における、異常(e.g. コンフリクト)時の文字列を指定。1行目はプロンプトで、2行目はハードステータスで使うことを想定。
    zstyle ':vcs_info:git:*' actionformats \
        '/%F{red}%r%f:%F{green}%b%f%m%F{blue}%c%f%F{yellow}%u%f-%F{red}%a%f' \
        '#[default] #[bg=green,fg=black]%s#[bg=red,fg=white] %r #[bg=blue,fg=white] %b #[bg=yellow,fg=black]%m%c%u#[bg=red,fg=white]-%a#[default]'
else
    zstyle ':vcs_info:git:*' formats \
        '/%F{red}%r%f:%F{green}%b%f%m%F{blue}%c%f%F{yellow}%u%f' \
        ' [%s]%r:%b%m%c%u'

    zstyle ':vcs_info:git:*' actionformats \
        '/%F{red}%r%f:%F{green}%b%f%m%F{blue}%c%f%F{yellow}%u%f-%F{red}%a%f' \
        ' [%s]%r:%b%m%c%u-%a'
fi


# 予測補完
## 使いにくかったので無効
#autoload predict-on
#predict-off


# エイリアス
## エイリアスを展開して補完できるようにする
setopt complete_aliases
#
alias where="command -v"
alias j="jobs -l"
#
case "${OSTYPE}" in
freebsd*|darwin*)
    alias ls="ls -G -w"
    ;;
linux*)
    alias ls="ls --color"
    ;;
esac
#
alias la="ls -a"
alias lf="ls -F"
alias ll="ls -l"
#
alias du="du -h"
alias df="df -h"
#
alias su="su -l"
#
alias rm="rm -i"
alias mv="mv -i"
#
alias grep='grep --color=always'
alias less='less -R'
#
alias kachi='make'
#
alias info='info --vi-keys'


# ターミナル固有のカラー設定
case "${TERM}" in
xterm|xterm-color|screen*)
    export LSCOLORS=exfxcxdxbxegedabagacad
    export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
    zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'
    ;;
kterm-color)
    stty erase '^H'
    export LSCOLORS=exfxcxdxbxegedabagacad
    export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
    zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'
    ;;
kterm)
    stty erase '^H'
    ;;
cons25)
    unset LANG
    export LSCOLORS=ExFxCxdxBxegedabagacad
    export LS_COLORS='di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
    zstyle ':completion:*' list-colors 'di=;34;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
    ;;
jfbterm-color)
    export LSCOLORS=gxFxCxdxBxegedabagacad
    export LS_COLORS='di=01;36:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
    zstyle ':completion:*' list-colors 'di=;36;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
    ;;
esac

# ターミナル固有のタイトル設定
case "${TERM}" in
screen*)
    function precmd_hardstatus() {
        # ハードステータス(ウィンドウタイトル)の設定
        echo -ne "\e]0;${USER}@${HOST%%.*}:${PWD}${vcs_info_msg_1_}\007"

    }

    function precmd_screen_title() {
        # screenのタイトルの設定
		echo -ne "\ek`basename ${SHELL}`@`basename ${PWD}`\e\\"
    }

    function preexec_screen_title() {
        echo -ne "\ek$1\e\\"
    }

	function zshexit_screen_title() {
		echo -ne "\ek[died at `date +'%F %T'`]\e\\"
	}

    add-zsh-hook precmd precmd_hardstatus
    add-zsh-hook precmd precmd_screen_title
    add-zsh-hook preexec preexec_screen_title
    add-zsh-hook zshexit zshexit_screen_title

    ;;
esac


# 環境固有の設定ファイルの読み込み
[ -f ${HOME}/.zshrc.local ] && source ${HOME}/.zshrc.local

# おみくじ
if [ "${TMUX}" ] ; then
    which fortune >/dev/null 2>&1
    if [ $? -eq 0 ] ; then
        if [ -d "${HOME}/fortunes" ] ; then
            which cowsay >/dev/null 2>&1
            if [ $? -eq 0 ] ; then
                fortune ${HOME}/fortunes | cowsay
                # fortune ${HOME}/fortunes | cowsay -W $((`tput cols` - 3))
            else
                fortune ${HOME}/fortunes
            fi
        else
            if [ $? -eq 0 ] ; then
                fortune -a | cowsay
                # fortune -a | cowsay -W $((`tput cols` - 3))
            else
                fortune -a
            fi
        fi
    fi
fi

